$date
	Fri Nov  1 00:10:31 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! zero $end
$var wire 8 " result [7:0] $end
$var wire 1 # negative $end
$var wire 1 $ carry $end
$var reg 1 % clk $end
$var reg 8 & data_in_a [7:0] $end
$var reg 8 ' data_in_b [7:0] $end
$var reg 8 ( instruction [7:0] $end
$var reg 1 ) reset $end
$scope module my_cpu $end
$var wire 1 % clk $end
$var wire 8 * data_in_a [7:0] $end
$var wire 8 + data_in_b [7:0] $end
$var wire 8 , instruction [7:0] $end
$var wire 1 ) reset $end
$var wire 8 - result [7:0] $end
$var wire 1 ! zero $end
$var wire 1 . reg_write $end
$var wire 8 / opcode [7:0] $end
$var wire 1 # negative $end
$var wire 1 0 mem_write $end
$var wire 1 1 mem_read $end
$var wire 8 2 mem_data [7:0] $end
$var wire 1 $ carry $end
$var wire 1 3 branch $end
$var wire 8 4 alu_result [7:0] $end
$var reg 8 5 regA [7:0] $end
$var reg 8 6 regB [7:0] $end
$scope module CU $end
$var wire 8 7 opcode [7:0] $end
$var reg 8 8 ALUOp [7:0] $end
$var reg 1 3 Branch $end
$var reg 1 1 MemRead $end
$var reg 1 0 MemWrite $end
$var reg 1 . RegWrite $end
$upscope $end
$scope module alu $end
$var wire 8 9 A [7:0] $end
$var wire 8 : B [7:0] $end
$var wire 8 ; opcode [7:0] $end
$var reg 1 $ Carry $end
$var reg 1 # Negative $end
$var reg 8 < Result [7:0] $end
$var reg 1 ! Zero $end
$upscope $end
$scope module mem $end
$var wire 1 1 MemRead $end
$var wire 1 0 MemWrite $end
$var wire 8 = address [7:0] $end
$var wire 1 % clk $end
$var wire 8 > data_in [7:0] $end
$var reg 8 ? data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
03
b0 2
01
00
b0 /
1.
b0 -
b0 ,
b0 +
b0 *
1)
b0 (
b0 '
b0 &
0%
0$
0#
b0 "
1!
$end
#5
1%
#10
0%
#15
1%
#20
0%
0)
#25
1%
#30
0%
b10101010 '
b10101010 +
b11001100 &
b11001100 *
#35
1#
b10001000 "
b10001000 -
b10001000 4
b10001000 <
0!
b10101010 6
b10101010 :
b10101010 >
b11001100 5
b11001100 9
b11001100 =
1%
#40
0%
#45
1%
#50
1#
b11101110 "
b11101110 -
b11101110 4
b11101110 <
b1 /
b1 8
b1 ;
1.
0%
b1 (
b1 ,
b1 7
#55
1%
#60
0%
#65
1%
#70
1$
0#
b1110110 "
b1110110 -
b1110110 4
b1110110 <
1.
b10 /
b10 8
b10 ;
0%
b10 (
b10 ,
b10 7
#75
1%
#80
0%
#85
1%
#90
0%
#95
1%
#100
0%
#105
1%
#110
0%
